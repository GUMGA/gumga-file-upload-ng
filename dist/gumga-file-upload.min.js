!function(n){function e(t){if(o[t])return o[t].exports;var a=o[t]={i:t,l:!1,exports:{}};return n[t].call(a.exports,a,a.exports,e),a.l=!0,a.exports}var o={};e.m=n,e.c=o,e.i=function(n){return n},e.d=function(n,o,t){e.o(n,o)||Object.defineProperty(n,o,{configurable:!1,enumerable:!0,get:t})},e.n=function(n){var o=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(o,"a",o),o},e.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},e.p="",e(e.s=0)}([function(n,e,o){"use strict";function t(n,e,o,t){function a(a,r,i){function l(n){return!g||e.validate(n.type,g)}function s(n){return!h||n.size<=1024*h}var u={noEndPoint:"É necessário um atributo endpoint no componente, contendo uma URL de API REST que receberá os arquivos."};i.endpoint||console.error(u.noEndPoint);var c=r.find("input"),p=n(i.model),d=p.assign,f=i.endpoint,g=!!i.accepted&&i.accepted.split(","),h=!!i.maxSize&&parseInt(i.maxSize),m=function(n){n.stopPropagation(),n.preventDefault()},v=l,b=s,y=function(n){a.queue.push({type:n.type,name:n.name,size:Math.round(n.size/1024),file:n})};a.queue=[],r.on("dragenter",function(n){m(n),r.find("section")[0].classList.add("dragOver")}),r.on("dragover",function(n){m(n),r.find("section")[0].classList.add("dragOver")}),r[0].ondrop=function(n){m(n),a.$apply(function(){return angular.forEach(n.dataTransfer.files,function(n){return y(n)})}),r.find("section")[0].classList.remove("dragOver")},c.bind("change",function(){a.queue=[],angular.forEach(c[0].files,function(n,e){var o=new FileReader;o.onload=function(){a.$apply(function(){if(d(a,n),v(n)&&b(n))y(n);else{var e=["Erro: "];v(n)&&e.push("Formatos permitidos "+g.join(", ")+". "),b(n)&&e.push("Máximo de "+h+"KB. "),e.push("Selecione outro."),a.alert=e.join("")}})},o.readAsDataURL(n)})});var E={onLoadStart:i.onUploadStart?a.onUploadStart:angular.noop,onProgress:function(n,e){return t(function(){return a.queue[e].percent=Math.round(n.loaded/n.total*100)})},onLoadEnd:i.onUploadComplete?a.onUploadComplete:angular.noop,onAbort:i.onUploadAbort?a.onUploadAbort:angular.noop,onError:i.onUploadError?a.onUploadError:angular.noop};a.upload=function(){E.onLoadStart(),angular.forEach(a.queue,function(n,e){var t=new FormData;t.append(i.attribute,n.file),o({method:"POST",url:f,uploadEventHandlers:{progress:function(n){return E.onProgress(n,e)},loadend:function(n){return E.onLoadEnd(n,e)},abort:function(n){return E.onAbort(n,e)},error:function(n){return E.onError(n,e)}},headers:{"Content-Type":void 0},data:t}).then(function(n){a.model=a.model||{},a.model.name=n.data})})},a.click=function(){c[0].click()},a.clear=function(){a.queue=[],a.alert=null}}return a.$inject=["$scope","$element","$attrs"],{restrict:"E",template:'\n      <div>\n      <section class="drag">\n           <span  class="glyphicon glyphicon-download-alt"></span>\n       </section>\n      <div style="margin-bottom: 10px">\n          <input type="file" id="input" ng-hide="true" ng-model="file">\n          <button type="button" ng-click="click()" class="btn btn-default">\n              <span class="glyphicon glyphicon-search"></span> Selecionar\n          </button>\n          <button type="button" ng-disabled="queue.length == 0"ng-click="upload()" class="btn btn-default">\n              <span class="glyphicon glyphicon-cloud-upload"></span> Enviar\n          </button>\n          <button type="button" ng-click="clear()" class="btn btn-default pull-right" ng-disabled="queue.length == 0">\n              <span class="glyphicon glyphicon-trash"></span> Limpar\n          </button>\n      </div>\n      <p class="alert alert-info" ng-show="queue.length == 0 && !alert">\n          <span class="glyphicon glyphicon-info-sign"></span> Selecione um arquivo ou arraste e solte aqui\n      </p>\n      <p class="alert alert-danger" ng-show="queue.length == 0 && alert">\n          <span class="glyphicon glyphicon-alert"></span> {{alert}}\n      </p>\n      <ul class="list-group" ng-show="queue.length > 0">\n          <li class="list-group-item alert" style="background-color: #d7eac8" ng-repeat="file in queue">\n              <div class="media">\n                  <div class="media-left">\n                      <span class="media-object glyphicon glyphicon-file" style="font-size: 32px"></span>\n                  </div>\n                  <div class="media-body">\n                      <h4 class="media-heading">{{file.name}}</h4>\n                      <span>{{file.size}} KB</span>\n                      <span></span>\n                      <div class="progress">\n                          <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="{{file.percent}}" aria-valuemin="0" aria-valuemax="100" style="width: {{file.percent}}%">\n                              <span>{{file.percent || 0}}%</span>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </li>\n      </ul>\n      </div>\n      ',scope:{model:"=",uploadMethod:"&",deleteMethod:"&",onUploadStart:"&?",onUploadComplete:"&?",onUploadAbort:"&?",onUploadError:"&?"},link:a}}Object.defineProperty(e,"__esModule",{value:!0}),t.$inject=["$parse","GumgaMimeTypeService","$http","$timeout"];var a=angular.module("gumga.fileupload",[]).directive("gumgaFileUpload",t);e.default=a.name}]);